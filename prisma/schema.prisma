// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  name      String
  email     String     @unique
  password  String
  role      Role       @default(USER)
  apiKeys   ApiKey[]
  reviews   Review[]
  orders    Order[]
  cartItems CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model ApiKey {
  id        String   @id @default(uuid())
  key       String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Book {
  id          String     @id @default(uuid())
  title       String
  author      String
  description String
  genre       String
  imageUrl    String?
  price       Float
  stock       Int
  reviews     Review[]
  cartItems   CartItem[]  // Showing ‚Äúüî• trending books‚Äù by cart frequency
                          // Admin panel showing books in pending carts
                          // Suggesting ‚Äúbooks in your friends‚Äô carts‚Äù
  orders      OrderItem[] // For order history
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Review {
  id        String   @id @default(uuid())
  rating    Int      // 1 to 5
  comment   String
  bookId    String
  userId    String
  book      Book     @relation(fields: [bookId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, bookId]) // prevent multiple reviews per user/book
}

model Order {
  id         String      @id @default(uuid())
  userId     String
  user       User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  items      OrderItem[]
  payment    Payment?
  totalPrice Float
  status     OrderStatus @default(PENDING)
  createdAt  DateTime    @default(now())
}

model OrderItem {
  id       String   @id @default(uuid())
  orderId  String
  bookId   String
  quantity Int
  price    Float // Snapshot price
  book     Book    @relation(fields: [bookId], references: [id])
  order    Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

model CartItem {
  id       String   @id @default(uuid())
  userId   String
  bookId   String
  quantity Int      @default(1)
  book     Book     @relation(fields: [bookId], references: [id])
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, bookId]) // one book per cart
}

model Payment {
  id         String     @id @default(uuid())
  orderId    String     @unique
  paymentId  String     @unique
  status     PaymentStatus
  amount     Float
  createdAt  DateTime   @default(now())
  order      Order      @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

enum Role {
  USER
  ADMIN
}

enum OrderStatus {
  PENDING
  PAID
  CANCELLED
  SHIPPED
  DELIVERED
}

enum PaymentStatus {
  CREATED
  SUCCESS
  FAILED
}
